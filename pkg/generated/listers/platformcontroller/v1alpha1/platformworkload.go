/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/platform-controller/pkg/apis/platformcontroller/v1alpha1"
)

// PlatformWorkloadLister helps list PlatformWorkloads.
// All objects returned here must be treated as read-only.
type PlatformWorkloadLister interface {
	// List lists all PlatformWorkloads in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformWorkload, err error)
	// PlatformWorkloads returns an object that can list and get PlatformWorkloads.
	PlatformWorkloads(namespace string) PlatformWorkloadNamespaceLister
	PlatformWorkloadListerExpansion
}

// platformworkloadLister implements the PlatformWorkloadLister interface.
type platformworkloadLister struct {
	indexer cache.Indexer
}

// NewPlatformWorkloadLister returns a new PlatformWorkloadLister.
func NewPlatformWorkloadLister(indexer cache.Indexer) PlatformWorkloadLister {
	return &platformworkloadLister{indexer: indexer}
}

// List lists all PlatformWorkloads in the indexer.
func (s *platformworkloadLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformWorkload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformWorkload))
	})
	return ret, err
}

// PlatformWorkloads returns an object that can list and get PlatformWorkloads.
func (s *platformworkloadLister) PlatformWorkloads(namespace string) PlatformWorkloadNamespaceLister {
	return platformworkloadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlatformWorkloadNamespaceLister helps list and get PlatformWorkloads.
// All objects returned here must be treated as read-only.
type PlatformWorkloadNamespaceLister interface {
	// List lists all PlatformWorkloads in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformWorkload, err error)
	// Get retrieves the PlatformWorkload from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PlatformWorkload, error)
	PlatformWorkloadNamespaceListerExpansion
}

// platformworkloadNamespaceLister implements the PlatformWorkloadNamespaceLister
// interface.
type platformworkloadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PlatformWorkloads in the indexer for a given namespace.
func (s platformworkloadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformWorkload, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformWorkload))
	})
	return ret, err
}

// Get retrieves the PlatformWorkload from the indexer for a given namespace and name.
func (s platformworkloadNamespaceLister) Get(name string) (*v1alpha1.PlatformWorkload, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("platformworkload"), name)
	}
	return obj.(*v1alpha1.PlatformWorkload), nil
}
